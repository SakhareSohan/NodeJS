1. Using await Inside async Functions
The await keyword can only be used inside async functions. It pauses the execution of the async function until the promise settles (resolves or rejects).

Basic Example
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Data fetched');
    }, 1000);
  });
}

async function myAsyncFunction() {
  console.log('Fetching data...');
  const data = await fetchData();
  console.log(data); // "Data fetched"
}

myAsyncFunction();


2. Handling Errors with try...catch
You can use try...catch blocks to handle errors in async functions, just like with synchronous code.

async function myAsyncFunction() {
  try {
    const data = await fetchData();
    console.log(data);
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}

myAsyncFunction();


3. Fetching Data with async/await
Let's use async/await with the Fetch API for a practical example.

async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Fetch error:', error);
  } finally {
    console.log('Fetch operation completed.');
  }
}

fetchData();


4. Parallel Execution with await
If you need to run multiple asynchronous operations in parallel, you can use Promise.all with await.

async function fetchData() {
  const urls = [
    'https://api.example.com/data1',
    'https://api.example.com/data2',
    'https://api.example.com/data3'
  ];

  try {
    const responses = await Promise.all(urls.map(url => fetch(url)));
    const data = await Promise.all(responses.map(response => response.json()));
    console.log(data);
  } catch (error) {
    console.error('Fetch error:', error);
  }
}

fetchData();


5. Sequential Execution with await
If you need to run multiple asynchronous operations sequentially, you can use await in a loop.

async function fetchDataSequentially() {
  const urls = [
    'https://api.example.com/data1',
    'https://api.example.com/data2',
    'https://api.example.com/data3'
  ];

  try {
    for (const url of urls) {
      const response = await fetch(url);
      const data = await response.json();
      console.log(data);
    }
  } catch (error) {
    console.error('Fetch error:', error);
  }
}

fetchDataSequentially();